@Autowired - as we know, used to inject beans under packages which are scanned through component scan.

	this can be used for autowiring interfaces also. In this cases, when we can call some method through this interface reference, the actual method called will be of implementation class of that interface.
	
	However, if multiple classes implements same interface, then comes the ambiguity error (run time).

@Qualifier -- in addition to @Autowired, if we use @Qualifier("<name of the bean class in camel case>")

	ex: if the implementation class name is PhonePe -- then the above name should be 'phonePe'
	
	Now, the question is we are hardcoding the qualifier bean, how to pass it in run time ??
	
	if we take the value from properties file and pass it inside the @Qualifier annotation. it won't work. It's not like value is not getting from properties file. value is able to be fetched, but it's the annotation which is not able to apply it.
	
	Ex: which won't work -- 
	
		@Autowired
		@Qualifier("${beanName}")

@Resource -- this annotation with dynamic parameter will serve the purpose alone without @Autowired
	
		@Resource(name="${beanName}")
		
		-- So, it is the combination of @Autowired and @Qualifier and dynamic usage